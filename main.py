import logging
import yaml
from datetime import datetime, timedelta
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build


# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
def load_config():
    with open("config.yaml", encoding="utf-8") as f:
        return yaml.safe_load(f)


config = load_config()
TOKEN = config["TELEGRAM_TOKEN"]
WHITELIST = config["WHITELIST_IDS"]
SHEET_ID = config["GOOGLE_SHEET_ID"]
CREDENTIALS_FILE = config["GOOGLE_CREDENTIALS_FILE"]
RANGE_NAME = config.get("RANGE_NAME", "Sheet1!A:F")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    filename="bot.log",
    level=logging.INFO,
    format='%(asctime)s %(levelname)s: %(message)s'
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets API
def init_sheets():
    creds = Credentials.from_service_account_file(
        CREDENTIALS_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )
    service = build('sheets', 'v4', credentials=creds)
    return service.spreadsheets()


sheet = init_sheets()


# –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–µ–ª —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤
def parse_number(v) -> float:
    """
    –ü—Ä–∏–π–º–∞—î int, float –∞–±–æ —Ä—è–¥–æ–∫, –∑–∞–º—ñ–Ω—é—î –∫–æ–º—É –Ω–∞ –∫—Ä–∞–ø–∫—É, –ø—Ä–∏–±–∏—Ä–∞—î –ø—Ä–æ–±—ñ–ª–∏.
    –Ø–∫—â–æ —î –∑–Ω–∞–∫ '%', –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —É –≤—ñ–¥—Å–æ—Ç–∫–æ–≤–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö (10% -> 10.0).
    –ù–µ–∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å 0.0
    """
    if isinstance(v, (int, float)):
        return float(v)
    if isinstance(v, str):
        s = v.replace('\u00A0', '').strip()
        # —è–∫—â–æ –≤—ñ–¥—Å–æ—Ç–æ–∫, –∑–∞–±–∏—Ä–∞—î–º–æ —Å–∏–º–≤–æ–ª '%'
        is_percent = s.endswith('%')
        if is_percent:
            s = s.rstrip('%').strip()
        s = s.replace(',', '.')
        try:
            num = float(s)
        except ValueError:
            return 0.0
        return num
    return 0.0


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
def fetch_data() -> list[dict]:
    try:
        result = sheet.values().get(
            spreadsheetId=SHEET_ID,
            range=RANGE_NAME,
            valueRenderOption='FORMATTED_VALUE',
            dateTimeRenderOption='FORMATTED_STRING'
        ).execute()
        values = result.get('values', [])
        data = []
        for row in values[1:]:
            if len(row) < 6:
                continue
            raw_date = row[0]
            try:
                date_obj = datetime.strptime(raw_date, "%d.%m.%Y").date()
            except Exception:
                continue
            data.append({
                'date': date_obj,
                'batons': parse_number(row[1]),
                'sales': parse_number(row[2]),
                'type': row[3],
                'expense': parse_number(row[4]),
                'margin': parse_number(row[5])  # –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ñ –∞–±–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            })
        return data
    except Exception:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ Google Sheets")
        return []


# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –¥–∞—Ç–æ—é
def filter_data(data, start_date=None, end_date=None) -> list[dict]:
    return [item for item in data
            if (start_date is None or item['date'] >= start_date)
            and (end_date is None or item['date'] <= end_date)]


# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –∑–≤—ñ—Ç—É
def compute_report(rows: list[dict]) -> dict:
    total_batons = sum(item['batons'] for item in rows)
    total_sales = sum(item['sales'] for item in rows)
    total_online = sum(item['sales'] for item in rows if item['type'] == '–û–Ω–ª–∞–π–Ω')
    total_fop = sum(item['sales'] for item in rows if item['type'] == '–§–û–ü')
    total_expense = sum(item['expense'] for item in rows)
    margins = [item['margin'] for item in rows]
    margins_online = [item['margin'] for item in rows if item['type'] == '–û–Ω–ª–∞–π–Ω']
    margins_fop = [item['margin'] for item in rows if item['type'] == '–§–û–ü']

    avg_margin = sum(margins) / len(margins) if margins else 0.0
    avg_online = sum(margins_online) / len(margins_online) if margins_online else 0.0
    avg_fop = sum(margins_fop) / len(margins_fop) if margins_fop else 0.0

    return {
        'total_batons': total_batons,
        'total_sales': total_sales,
        'total_online': total_online,
        'total_fop': total_fop,
        'expense': total_expense,
        'avg_margin': avg_margin,
        'avg_online': avg_online,
        'avg_fop': avg_fop
    }


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É
def format_report(start_date: datetime.date, end_date: datetime.date, stats: dict) -> str:
    header = f"üìä –ó–≤—ñ—Ç –ß—ñ–Ω–∞–∑–µ—Å –∑–∞ {start_date.strftime('%d.%m.%Y')}‚Äì{end_date.strftime('%d.%m.%Y')}\n\n"
    body = (
        f"üîπ –ë–∞—Ç–æ–Ω—ñ–≤ –ø—Ä–æ–¥–∞–Ω–æ: {stats['total_batons']}\n"
        f"üîπ –°—É–º–∞ –ø—Ä–æ–¥–∞–∂—ñ–≤: {stats['total_sales']}\n\n"
        f"üí≥ –§–û–ü-–æ–Ω–ª–∞–π–Ω: {stats['total_online']}\n"
        f"ü§ù –§–û–ü-–§–û–ü: {stats['total_fop']}\n\n"
        f"üí∏ –í–∏—Ç—Ä–∞—Ç–∏: {stats['expense']}\n\n"
        f"üìà –°–µ—Ä–µ–¥–Ω—è –º–∞—Ä–∂–∞: {stats['avg_margin']:.2f}%\n"
        f"- –û–Ω–ª–∞–π–Ω: {stats['avg_online']:.2f}%\n"
        f"- –§–û–ü: {stats['avg_fop']:.2f}%\n"
    )
    return header + body


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É
def restricted(func):
    def wrapper(message):
        if message.from_user.id not in WHITELIST:
            bot.send_message(message.chat.id, "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        return func(message)

    return wrapper


@bot.message_handler(commands=['start'])
@restricted
def start_command(message):
    kb = InlineKeyboardMarkup(row_width=1)
    for label, cb in [
        ("–ß—ñ–Ω–∞–∑–µ—Å", "chinazes_")
    ]:
        kb.add(InlineKeyboardButton(label, callback_data=cb))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith('chinazes'))
@restricted
def period_command(call):
    kb = InlineKeyboardMarkup(row_width=1)
    for label, cb in [
        ("üóì –ó–≤—ñ—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å", "report_week"),
        ("üóì –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å", "report_month"),
        ("üìÜ –ó–≤—ñ—Ç –∑ –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–¥–∞–∂—ñ–≤", "report_all"),
    ]:
        kb.add(InlineKeyboardButton(label, callback_data=cb))
    bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∑–≤—ñ—Ç—É:", reply_markup=kb)


@bot.callback_query_handler(func=lambda c: c.data.startswith('report_'))
@restricted
def callback_report(call):
    now = datetime.now().date()
    if call.data == 'report_week':
        start = now - timedelta(days=7)
    elif call.data == 'report_month':
        start = now - timedelta(days=30)
    else:
        all_data = fetch_data()
        start = min((d['date'] for d in all_data), default=now)
    end = now

    data = fetch_data()
    filtered = filter_data(data, start, end)
    stats = compute_report(filtered)
    report_text = format_report(start, end, stats)
    bot.send_message(call.message.chat.id, report_text)


@bot.message_handler(commands=['myid'])
def myid_command(message):
    bot.send_message(message.chat.id, f"üÜî –í–∞—à Telegram ID: `{message.from_user.id}`", parse_mode="Markdown")


if __name__ == '__main__':
    bot.infinity_polling()
